/*
Copyright 1987-2012 Robert B. K. Dewar and Mark Emmer.

This file is part of Macro SPITBOL.

    Macro SPITBOL is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    Macro SPITBOL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Macro SPITBOL.  If not, see <http://www.gnu.org/licenses/>.
*/

/* Globals are defined in global.init, which is included in main.c
   Other files needing access to the globals need t include "globals.ext" */

/* Global data areas needed by compiler.  */

extern	int cmdcnt;		/*  command count */
extern	int gblargc;		/*  argc from command line*/
extern	char **gblargv;	/*  argv from command line */
extern	char *uarg;		/*  -u argument from command line*/

/* Information to be given to compiler */

extern	uword lnsppage;	/*  lines per page for listings */
extern	uword pagewdth;	/*  width of output line for listings */
extern	long spitflag;	/*  flags to be given to compiler */

/* Memory variables that control compiler's dynamic area and stack.  */

extern	uword memincb;	/*  meminc converted to bytes */
extern	uword databts;	/*  max size in bytes of data area  */
extern	char *basemem;		/*  base of dynamic memory */
extern	char *topmem;		/*  current top of dynamic memory */
extern	char *maxmem;		/*  maximum top of dynamic memory */
extern	uword maxsize;	/*  maximum size element in dyn. memory */
extern	uword stacksiz;	/*  maximum size of stack in bytes*/
extern	char *lowsp;		/*  lowest legal sp value */

/* Variables that describe access to standard input and output files.  */

extern	int inpcnt;		/*  number of input files */
extern	char **inpptr;	/*  pointer to input file in argv array */
extern	char *outptr;		/*  pointer to output listing file  */
extern	char *sfn;		/*  current source file name */
extern	int readshell0;	/*  interlock default reading of fd 0 */
extern	int first_record;	/*  non-zero before first record read */
extern	int executing;	/*  non-zero during execution */
extern	int originp;		/*  dup of original fd 0  */
extern	int curfile;		/*  current file position (swcinp)*/
extern	int errflag;		/*  Nonzero if error in swcoup */
extern	int origoup;		/*  Dup of shell's std output (swcoup)  */
extern	int oupState;		/*  Current state of swcoup */
extern	int nesting;		/*  depth of include file nesting */
extern	int dcdone;		/*  if zysdc has written headlines  */
extern	int provide_name;	/*  sysrd to deliver filename to caller */
extern	char *pathptr;		/*  include file paths */

extern	word bfblksize;
extern	struct ioblk *save_iob;
extern	word in_gbcol;	/* record whether in GBCOL or not */
extern	int mallocSys;	/* Kludgy Intel interlock with malloc and free */
extern	int first_time;	/* Flag for systm.c */
extern	long start_time;	/* record start-up time for systm.c */
extern	char savexl;		/* used by syshs.c */
extern	char savexr;
extern	int inc_fd[INCLUDE_DEPTH];	/* used by sysif.c  */
extern	int fd;		
extern	FILEPOS inc_pos[INCLUDE_DEPTH];
extern	
extern	word maxf;		/* number of files specified this way -1 */

/*
        Structure to record i/o files specified on command line
        with /#=filename.
*/
#define Ncmdf   12

typedef struct
{
  word filenum;
  char *fileptr;
} CFile;
extern CFile cfiles[Ncmdf];	/* Array of structures to record info */

extern	struct ioblk ttyiobin;
#define ttyiobininit {0,    /* type word */ \
    IRECSIZ,                /* length */ \
        0,		/* filename */ \
        0,              /* process id */ \
        0,              /* tty BFBLK */ \
    STDERRFD,               /* file descriptor 2  */ \
    IO_INP+IO_OPN+IO_SYS+IO_CIN, /* flg1 */ \
        0,              /* flg2 */ \
        EOL1}           /* end of line char 1 */ 

#define ttyioboutinit {0,   /* type word */ \
        ORECSIZ,           /* length */ \
        0,                 /* filename */ \
        0,                 /* process id */ \
        0,                 /* tty BFBLK */ \
    STDERRFD,              /* file descriptor 2  */ \
    IO_OUP+IO_OPN+IO_SYS+IO_COT+IO_WRC, /* flg1 */ \
        0,                 /* flg2                             */ \
        EOL1}              /* end of line char 1 */ 

extern	struct ioblk ttyiobout;

#define inpiobinit      \
       {0,             /* type word */ \
        IRECSIZ,       /* length */ \
        0,             /* filename */ \
        0,             /* process id */ \
        0,             /* std input BFBLK */ \
        0,             /* file descriptor 0  */ \
        IO_INP+IO_OPN+IO_SYS,   /* flg1: */ \
        0,             /* flg2:*/ \
        EOL1}          /* end of line char 1 */ 

extern	struct ioblk inpiob;


#define outiobinit  \
	{0,          /* type word */ \
        ORECSIZ,     /* length */ \
        0,           /* filename */ \
        0,           /* process id */ \
        0,           /* no BFBLK needed */ \
        1,           /* file descriptor 1 */ \
        IO_OUP+IO_OPN+IO_SYS+IO_WRC,  /* flg1: */ \
        0,           /* flg2: */ \
        EOL1}        /* end of line char 1 */ 

extern	struct ioblk oupiob;

extern	char namebuf[256];
extern	int save_fd0;		/* Hold current fd 0 for swcinp */

extern	int expanding;	/* non-zero if doing expansion */
extern	int compressing;	/* non-zero if doing expansion */
extern	long extra;
extern	int bufcnt;
extern	unsigned char *bufptr;
extern	int bit_count;
extern	unsigned long bit_buffer;
extern	short int *code_value;	/* This is the code value array             */
extern	short unsigned int *prefix_code;	/* This array holds the prefix codes  */
extern	unsigned char *append_character;	/* This array holds the appended chars  */
extern	unsigned char *decode_stack;	/* This array holds the decoded string  */
extern	unsigned char *buffer;	/* Read/write buffer                                */

extern	int aoutfd;
extern	FILEPOS fp;

/*
    lmodstk is set when creating a load module.  On the subsequent
    execution of a load module, the presence of a non-zero value in
    lmodstk determines that the execution is indeed of a load module.

    For Intel DOS Extender, lmodstk provides the file position within
        the execution module where a save file begins.
*/
extern	word * lmodstk;


/*
   Globals found in assembly language modules.

 */
extern	extern int reg_size;
extern	extern int hasfpu;
extern	extern char cprtmsg[];
extern	extern word reg_block;

#if ENGINE
/*
   Engine globals
 */
extern	word lastError;
#endif /* ENGINE */
