  &trim = &anchor = 1

loop
	line  = input ' '	:f(end)

 output = trim(line)	:(loop)
* flc
 line breakx(' .,') . pre len(1) . sep1 'flc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'flc' '}' sep2 last
* add
 line breakx(' .,') . pre len(1) . sep1 'add' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'add' '}' sep2 last
* adi
 line breakx(' .,') . pre len(1) . sep1 'adi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'adi' '}' sep2 last
* adr
 line breakx(' .,') . pre len(1) . sep1 'adr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'adr' '}' sep2 last
* anb
 line breakx(' .,') . pre len(1) . sep1 'anb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'anb' '}' sep2 last
* aov
 line breakx(' .,') . pre len(1) . sep1 'aov' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'aov' '}' sep2 last
* atn
 line breakx(' .,') . pre len(1) . sep1 'atn' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'atn' '}' sep2 last
* bod
 line breakx(' .,') . pre len(1) . sep1 'bod' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bod' '}' sep2 last
* bev
 line breakx(' .,') . pre len(1) . sep1 'bev' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bev' '}' sep2 last
* bct
 line breakx(' .,') . pre len(1) . sep1 'bct' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bct' '}' sep2 last
* beq
 line breakx(' .,') . pre len(1) . sep1 'beq' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'beq' '}' sep2 last
* bge
 line breakx(' .,') . pre len(1) . sep1 'bge' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bge' '}' sep2 last
* bgt
 line breakx(' .,') . pre len(1) . sep1 'bgt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bgt' '}' sep2 last
* bhi
 line breakx(' .,') . pre len(1) . sep1 'bhi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bhi' '}' sep2 last
* ble
 line breakx(' .,') . pre len(1) . sep1 'ble' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ble' '}' sep2 last
* blo
 line breakx(' .,') . pre len(1) . sep1 'blo' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'blo' '}' sep2 last
* blt
 line breakx(' .,') . pre len(1) . sep1 'blt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'blt' '}' sep2 last
* bne
 line breakx(' .,') . pre len(1) . sep1 'bne' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bne' '}' sep2 last
* bnz
 line breakx(' .,') . pre len(1) . sep1 'bnz' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bnz' '}' sep2 last
* brn
 line breakx(' .,') . pre len(1) . sep1 'brn' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'brn' '}' sep2 last
* bri
 line breakx(' .,') . pre len(1) . sep1 'bri' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bri' '}' sep2 last
* bsw
 line breakx(' .,') . pre len(1) . sep1 'bsw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bsw' '}' sep2 last
* btw
 line breakx(' .,') . pre len(1) . sep1 'btw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'btw' '}' sep2 last
* bze
 line breakx(' .,') . pre len(1) . sep1 'bze' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'bze' '}' sep2 last
* ceq
 line breakx(' .,') . pre len(1) . sep1 'ceq' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ceq' '}' sep2 last
* chk
 line breakx(' .,') . pre len(1) . sep1 'chk' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'chk' '}' sep2 last
* chp
 line breakx(' .,') . pre len(1) . sep1 'chp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'chp' '}' sep2 last
* cmb
 line breakx(' .,') . pre len(1) . sep1 'cmb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cmb' '}' sep2 last
* cmc
 line breakx(' .,') . pre len(1) . sep1 'cmc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cmc' '}' sep2 last
* cne
 line breakx(' .,') . pre len(1) . sep1 'cne' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cne' '}' sep2 last
* cos
 line breakx(' .,') . pre len(1) . sep1 'cos' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cos' '}' sep2 last
* csc
 line breakx(' .,') . pre len(1) . sep1 'csc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'csc' '}' sep2 last
* ctb
 line breakx(' .,') . pre len(1) . sep1 'ctb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ctb' '}' sep2 last
* ctw
 line breakx(' .,') . pre len(1) . sep1 'ctw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ctw' '}' sep2 last
* cvd
 line breakx(' .,') . pre len(1) . sep1 'cvd' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cvd' '}' sep2 last
* cvm
 line breakx(' .,') . pre len(1) . sep1 'cvm' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'cvm' '}' sep2 last
* dac
 line breakx(' .,') . pre len(1) . sep1 'dac' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dac' '}' sep2 last
* dbc
 line breakx(' .,') . pre len(1) . sep1 'dbc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dbc' '}' sep2 last
* dca
 line breakx(' .,') . pre len(1) . sep1 'dca' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dca' '}' sep2 last
* dcv
 line breakx(' .,') . pre len(1) . sep1 'dcv' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dcv' '}' sep2 last
* def
 line breakx(' .,') . pre len(1) . sep1 'def' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'def' '}' sep2 last
* dic
 line breakx(' .,') . pre len(1) . sep1 'dic' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dic' '}' sep2 last
* drc
 line breakx(' .,') . pre len(1) . sep1 'drc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'drc' '}' sep2 last
* dtc
 line breakx(' .,') . pre len(1) . sep1 'dtc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dtc' '}' sep2 last
* dvi
 line breakx(' .,') . pre len(1) . sep1 'dvi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dvi' '}' sep2 last
* dvr
 line breakx(' .,') . pre len(1) . sep1 'dvr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'dvr' '}' sep2 last
* ejc
 line breakx(' .,') . pre len(1) . sep1 'ejc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ejc' '}' sep2 last
* else
 line breakx(' .,') . pre len(1) . sep1 'else' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'else' '}' sep2 last
* end
 line breakx(' .,') . pre len(1) . sep1 'end' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'end' '}' sep2 last
* enp
 line breakx(' .,') . pre len(1) . sep1 'enp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'enp' '}' sep2 last
* ent
 line breakx(' .,') . pre len(1) . sep1 'ent' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ent' '}' sep2 last
* equ
 line breakx(' .,') . pre len(1) . sep1 'equ' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'equ' '}' sep2 last
* erb
 line breakx(' .,') . pre len(1) . sep1 'erb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'erb' '}' sep2 last
* err
 line breakx(' .,') . pre len(1) . sep1 'err' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'err' '}' sep2 last
* esw
 line breakx(' .,') . pre len(1) . sep1 'esw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'esw' '}' sep2 last
* etx
 line breakx(' .,') . pre len(1) . sep1 'etx' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'etx' '}' sep2 last
* exi
 line breakx(' .,') . pre len(1) . sep1 'exi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'exi' '}' sep2 last
* exp
 line breakx(' .,') . pre len(1) . sep1 'exp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'exp' '}' sep2 last
* fi
 line breakx(' .,') . pre len(1) . sep1 'fi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'fi' '}' sep2 last
* ica
 line breakx(' .,') . pre len(1) . sep1 'ica' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ica' '}' sep2 last
* icp
 line breakx(' .,') . pre len(1) . sep1 'icp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'icp' '}' sep2 last
* icv
 line breakx(' .,') . pre len(1) . sep1 'icv' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'icv' '}' sep2 last
* ieq
 line breakx(' .,') . pre len(1) . sep1 'ieq' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ieq' '}' sep2 last
* if
 line breakx(' .,') . pre len(1) . sep1 'if' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'if' '}' sep2 last
* iff
 line breakx(' .,') . pre len(1) . sep1 'iff' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'iff' '}' sep2 last
* ige
 line breakx(' .,') . pre len(1) . sep1 'ige' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ige' '}' sep2 last
* igt
 line breakx(' .,') . pre len(1) . sep1 'igt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'igt' '}' sep2 last
* ile
 line breakx(' .,') . pre len(1) . sep1 'ile' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ile' '}' sep2 last
* ilt
 line breakx(' .,') . pre len(1) . sep1 'ilt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ilt' '}' sep2 last
* ine
 line breakx(' .,') . pre len(1) . sep1 'ine' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ine' '}' sep2 last
* ino
 line breakx(' .,') . pre len(1) . sep1 'ino' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ino' '}' sep2 last
* inp
 line breakx(' .,') . pre len(1) . sep1 'inp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'inp' '}' sep2 last
* inr
 line breakx(' .,') . pre len(1) . sep1 'inr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'inr' '}' sep2 last
* iov
 line breakx(' .,') . pre len(1) . sep1 'iov' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'iov' '}' sep2 last
* itr
 line breakx(' .,') . pre len(1) . sep1 'itr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'itr' '}' sep2 last
* jsr
 line breakx(' .,') . pre len(1) . sep1 'jsr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'jsr' '}' sep2 last
* lch
 line breakx(' .,') . pre len(1) . sep1 'lch' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lch' '}' sep2 last
* lct
 line breakx(' .,') . pre len(1) . sep1 'lct' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lct' '}' sep2 last
* lcp
 line breakx(' .,') . pre len(1) . sep1 'lcp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lcp' '}' sep2 last
* lcw
 line breakx(' .,') . pre len(1) . sep1 'lcw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lcw' '}' sep2 last
* ldi
 line breakx(' .,') . pre len(1) . sep1 'ldi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ldi' '}' sep2 last
* ldr
 line breakx(' .,') . pre len(1) . sep1 'ldr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ldr' '}' sep2 last
* lei
 line breakx(' .,') . pre len(1) . sep1 'lei' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lei' '}' sep2 last
* lnf
 line breakx(' .,') . pre len(1) . sep1 'lnf' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lnf' '}' sep2 last
* lsh
 line breakx(' .,') . pre len(1) . sep1 'lsh' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lsh' '}' sep2 last
* lsx
 line breakx(' .,') . pre len(1) . sep1 'lsx' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'lsx' '}' sep2 last
* mcb
 line breakx(' .,') . pre len(1) . sep1 'mcb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mcb' '}' sep2 last
* mfi
 line breakx(' .,') . pre len(1) . sep1 'mfi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mfi' '}' sep2 last
* mli
 line breakx(' .,') . pre len(1) . sep1 'mli' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mli' '}' sep2 last
* mlr
 line breakx(' .,') . pre len(1) . sep1 'mlr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mlr' '}' sep2 last
* mnz
 line breakx(' .,') . pre len(1) . sep1 'mnz' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mnz' '}' sep2 last
* mov
 line breakx(' .,') . pre len(1) . sep1 'mov' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mov' '}' sep2 last
* mti
 line breakx(' .,') . pre len(1) . sep1 'mti' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mti' '}' sep2 last
* mvc
 line breakx(' .,') . pre len(1) . sep1 'mvc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mvc' '}' sep2 last
* mvw
 line breakx(' .,') . pre len(1) . sep1 'mvw' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mvw' '}' sep2 last
* mwb
 line breakx(' .,') . pre len(1) . sep1 'mwb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'mwb' '}' sep2 last
* ngi
 line breakx(' .,') . pre len(1) . sep1 'ngi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ngi' '}' sep2 last
* ngr
 line breakx(' .,') . pre len(1) . sep1 'ngr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ngr' '}' sep2 last
* nzb
 line breakx(' .,') . pre len(1) . sep1 'nzb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'nzb' '}' sep2 last
* orb
 line breakx(' .,') . pre len(1) . sep1 'orb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'orb' '}' sep2 last
* plc
 line breakx(' .,') . pre len(1) . sep1 'plc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'plc' '}' sep2 last
* ppm
 line breakx(' .,') . pre len(1) . sep1 'ppm' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ppm' '}' sep2 last
* prc
 line breakx(' .,') . pre len(1) . sep1 'prc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'prc' '}' sep2 last
* psc
 line breakx(' .,') . pre len(1) . sep1 'psc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'psc' '}' sep2 last
* req
 line breakx(' .,') . pre len(1) . sep1 'req' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'req' '}' sep2 last
* rge
 line breakx(' .,') . pre len(1) . sep1 'rge' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rge' '}' sep2 last
* rgt
 line breakx(' .,') . pre len(1) . sep1 'rgt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rgt' '}' sep2 last
* rle
 line breakx(' .,') . pre len(1) . sep1 'rle' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rle' '}' sep2 last
* rlt
 line breakx(' .,') . pre len(1) . sep1 'rlt' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rlt' '}' sep2 last
* rmi
 line breakx(' .,') . pre len(1) . sep1 'rmi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rmi' '}' sep2 last
* rne
 line breakx(' .,') . pre len(1) . sep1 'rne' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rne' '}' sep2 last
* rno
 line breakx(' .,') . pre len(1) . sep1 'rno' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rno' '}' sep2 last
* rov
 line breakx(' .,') . pre len(1) . sep1 'rov' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rov' '}' sep2 last
* rsh
 line breakx(' .,') . pre len(1) . sep1 'rsh' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rsh' '}' sep2 last
* rsx
 line breakx(' .,') . pre len(1) . sep1 'rsx' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rsx' '}' sep2 last
* rti
 line breakx(' .,') . pre len(1) . sep1 'rti' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rti' '}' sep2 last
* rtn
 line breakx(' .,') . pre len(1) . sep1 'rtn' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'rtn' '}' sep2 last
* sbi
 line breakx(' .,') . pre len(1) . sep1 'sbi' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sbi' '}' sep2 last
* sbr
 line breakx(' .,') . pre len(1) . sep1 'sbr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sbr' '}' sep2 last
* sch
 line breakx(' .,') . pre len(1) . sep1 'sch' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sch' '}' sep2 last
* scp
 line breakx(' .,') . pre len(1) . sep1 'scp' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'scp' '}' sep2 last
* sec
 line breakx(' .,') . pre len(1) . sep1 'sec' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sec' '}' sep2 last
* sin
 line breakx(' .,') . pre len(1) . sep1 'sin' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sin' '}' sep2 last
* sqr
 line breakx(' .,') . pre len(1) . sep1 'sqr' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sqr' '}' sep2 last
* ssl
 line breakx(' .,') . pre len(1) . sep1 'ssl' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ssl' '}' sep2 last
* sss
 line breakx(' .,') . pre len(1) . sep1 'sss' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sss' '}' sep2 last
* sti
 line breakx(' .,') . pre len(1) . sep1 'sti' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sti' '}' sep2 last
* str
 line breakx(' .,') . pre len(1) . sep1 'str' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'str' '}' sep2 last
* sub
 line breakx(' .,') . pre len(1) . sep1 'sub' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'sub' '}' sep2 last
* tan
 line breakx(' .,') . pre len(1) . sep1 'tan' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'tan' '}' sep2 last
* then
 line breakx(' .,') . pre len(1) . sep1 'then' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'then' '}' sep2 last
* trc
 line breakx(' .,') . pre len(1) . sep1 'trc' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'trc' '}' sep2 last
* ttl
 line breakx(' .,') . pre len(1) . sep1 'ttl' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'ttl' '}' sep2 last
* undef
 line breakx(' .,') . pre len(1) . sep1 'undef' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'undef' '}' sep2 last
* wtb
 line breakx(' .,') . pre len(1) . sep1 'wtb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'wtb' '}' sep2 last
* xob
 line breakx(' .,') . pre len(1) . sep1 'xob' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'xob' '}' sep2 last
* zer
 line breakx(' .,') . pre len(1) . sep1 'zer' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'zer' '}' sep2 last
* zgb
 line breakx(' .,') . pre len(1) . sep1 'zgb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'zgb' '}' sep2 last
* zrb
 line breakx(' .,') . pre len(1) . sep1 'zrb' any(' ,.') . sep2 rem . last =   pre sep1 '{' 'zrb' '}' sep2 last
end
