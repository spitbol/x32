*

	&anchor = &trim = 1
	lastline = 
*	state is null when normal text, non-null when processing block
*	comment
	inside.comment  =
					:(loop)
copy.comment	
	thisline = trim(' ' substr(thisline,2))
copy
	output = thisline
loop
	thisline = nextline
	nextline = trim(input)	:f(end)
	lines = lines + 1
 	output = lpad( lines,5) ' ' 'this  ' thisline '$'
 	output = lpad( lines,5) ' ' 'next  ' nextline '$'
 	output = lpad( lines,5) ' ' inside.comment
	
*	gt(lines,27200)		:s(copy.rest)
*	gt(lines,1000)		:s(end)
	differ(inside.comment)	:s(in.comment)
* here looking for start of block
	ident(nextline)		:s(copy)
* turn line with only initial comment characer into null line
	thisline = ident(thisline,'*') 	:s(copy)
	differ(substr(nextline,1,1), '{')		:s(copy)
	output = 'BLOCK comment start at ' lines
	inside.comment = 'yes'
* if opener stands alone, just copy it out
	eq(size(thisline),1)			:s(copy)
* here to swap opener in next line with this line
	output = '{'
	output = ' ' substr(nextline,2)
	nextline = input		:(loop)

in.comment
* here if inside block comment
	ident(thisline)			:s(copy)
	leq(substr(thisline,1,1), '*')	:s(copy.comment)
	leq(substr(thisline,1,1), ' ')	:s(copy.comment)
	output = 'BLOCK comment end ' lines
	output = '}'	
	inside.comment =		:(copy)
copy.rest
	output = thisline
	output = nextline
copy.r
	output = input	:s(copy.r)
* initial state
end
